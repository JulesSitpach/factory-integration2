          {/* Demand Forecasting Tab */}
          {activeTab === 'forecasting' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">{t('forecasting.demandForecasting')}</h3>
                <button
                  className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => setShowForecastModal(true)}
                >
                  <PlusIcon className="h-4 w-4 mr-2" />
                  {t('forecasting.addForecast')}
                </button>
              </div>
              
              {/* Forecast Overview */}
              <div className="bg-white border rounded-lg overflow-hidden">
                <div className="px-4 py-3 border-b">
                  <h3 className="text-lg font-medium">{t('forecasting.forecastOverview')}</h3>
                </div>
                <div className="p-4">
                  {inventoryItems.length === 0 ? (
                    <div className="text-center py-12">
                      <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100">
                        <DocumentChartBarIcon className="h-6 w-6 text-blue-600" />
                      </div>
                      <h3 className="mt-2 text-sm font-medium text-gray-900">{t('forecasting.noItems')}</h3>
                      <p className="mt-1 text-sm text-gray-500">{t('forecasting.addItemsFirst')}</p>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      {/* Select item for forecast */}
                      <div className="max-w-md">
                        <label htmlFor="forecast-item" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.selectItem')}
                        </label>
                        <select
                          id="forecast-item"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={selectedItem?.id || ''}
                          onChange={(e) => {
                            const item = inventoryItems.find(item => item.id === e.target.value);
                            setSelectedItem(item || null);
                          }}
                        >
                          <option value="">{t('forecasting.chooseItem')}</option>
                          {inventoryItems.map((item) => (
                            <option key={item.id} value={item.id}>
                              {item.name} ({item.sku})
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      {selectedItem && (
                        <div className="space-y-6">
                          {/* Forecast Chart */}
                          <div className="h-80 bg-white p-4 border rounded-lg">
                            <h4 className="text-sm font-medium text-gray-700 mb-4">{t('forecasting.demandTrend')}</h4>
                            <ResponsiveContainer width="100%" height="85%">
                              <LineChart
                                data={generateForecastChartData(selectedItem.id)}
                                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                              >
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="date" />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Line
                                  type="monotone"
                                  dataKey="forecast"
                                  name={t('forecasting.forecast')}
                                  stroke="#3b82f6"
                                  activeDot={{ r: 8 }}
                                  strokeWidth={2}
                                />
                                <Line
                                  type="monotone"
                                  dataKey="actual"
                                  name={t('forecasting.actual')}
                                  stroke="#10b981"
                                  activeDot={{ r: 8 }}
                                  strokeWidth={2}
                                />
                              </LineChart>
                            </ResponsiveContainer>
                          </div>
                          
                          {/* Forecast Details */}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="bg-white p-4 border rounded-lg">
                              <h4 className="text-sm font-medium text-gray-700">{t('forecasting.currentStock')}</h4>
                              <div className="mt-2 flex items-baseline">
                                <p className="text-2xl font-semibold text-gray-900">{selectedItem.current_stock}</p>
                                <p className="ml-2 text-sm text-gray-500">{t('forecasting.units')}</p>
                              </div>
                              <div className="mt-4">
                                <div className="flex items-center justify-between">
                                  <span className="text-sm text-gray-500">{t('forecasting.reorderPoint')}</span>
                                  <span className="text-sm font-medium">{selectedItem.reorder_point}</span>
                                </div>
                                <div className="mt-1 h-2 bg-gray-200 rounded-full">
                                  <div 
                                    className={`h-2 rounded-full ${
                                      selectedItem.current_stock <= selectedItem.reorder_point ? 'bg-red-500' : 'bg-green-500'
                                    }`}
                                    style={{ 
                                      width: `${Math.min(100, (selectedItem.current_stock / (selectedItem.reorder_point * 2)) * 100)}%` 
                                    }}
                                  ></div>
                                </div>
                              </div>
                            </div>
                            
                            <div className="bg-white p-4 border rounded-lg">
                              <h4 className="text-sm font-medium text-gray-700">{t('forecasting.leadTime')}</h4>
                              <div className="mt-2 flex items-baseline">
                                <p className="text-2xl font-semibold text-gray-900">{selectedItem.lead_time_days || 'N/A'}</p>
                                <p className="ml-2 text-sm text-gray-500">{t('forecasting.days')}</p>
                              </div>
                              <div className="mt-4 flex items-center text-sm text-gray-500">
                                <ClockIcon className="h-4 w-4 mr-1 text-gray-400" />
                                <span>{t('forecasting.orderBy')}: {
                                  selectedItem.lead_time_days 
                                    ? format(addDays(new Date(), -selectedItem.lead_time_days), 'MMM d, yyyy')
                                    : 'N/A'
                                }</span>
                              </div>
                            </div>
                            
                            <div className="bg-white p-4 border rounded-lg">
                              <h4 className="text-sm font-medium text-gray-700">{t('forecasting.projectedStockout')}</h4>
                              <div className="mt-2">
                                <p className="text-2xl font-semibold text-gray-900">
                                  {format(addDays(new Date(), Math.floor(Math.random() * 30) + 15), 'MMM d')}
                                </p>
                              </div>
                              <div className="mt-4 flex items-center text-sm text-gray-500">
                                <CalendarDaysIcon className="h-4 w-4 mr-1 text-gray-400" />
                                <span>{t('forecasting.basedOnTrend')}</span>
                              </div>
                            </div>
                          </div>
                          
                          {/* Forecast Recommendations */}
                          <div className="bg-white p-4 border rounded-lg">
                            <h4 className="text-sm font-medium text-gray-700">{t('forecasting.recommendations')}</h4>
                            <div className="mt-4 space-y-4">
                              <div className="flex items-start">
                                <div className="flex-shrink-0">
                                  <CheckCircleIcon className="h-5 w-5 text-green-500" />
                                </div>
                                <div className="ml-3">
                                  <h5 className="text-sm font-medium text-gray-900">{t('forecasting.optimalOrderSize')}</h5>
                                  <p className="mt-1 text-sm text-gray-500">
                                    {t('forecasting.orderRecommendation', {
                                      units: Math.floor(Math.random() * 100) + 50,
                                      cost: formatCurrency((Math.floor(Math.random() * 100) + 50) * (selectedItem.unit_cost || 10))
                                    })}
                                  </p>
                                </div>
                              </div>
                              
                              <div className="flex items-start">
                                <div className="flex-shrink-0">
                                  <ClockIcon className="h-5 w-5 text-yellow-500" />
                                </div>
                                <div className="ml-3">
                                  <h5 className="text-sm font-medium text-gray-900">{t('forecasting.timeToOrder')}</h5>
                                  <p className="mt-1 text-sm text-gray-500">
                                    {t('forecasting.orderTimingRecommendation', {
                                      days: Math.floor(Math.random() * 10) + 5
                                    })}
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
              
              {/* Seasonal Trends */}
              <div className="bg-white border rounded-lg overflow-hidden">
                <div className="px-4 py-3 border-b">
                  <h3 className="text-lg font-medium">{t('forecasting.seasonalTrends')}</h3>
                </div>
                <div className="p-4">
                  <div className="h-80">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={[
                          { month: 'Jan', value: 65 },
                          { month: 'Feb', value: 59 },
                          { month: 'Mar', value: 80 },
                          { month: 'Apr', value: 81 },
                          { month: 'May', value: 56 },
                          { month: 'Jun', value: 55 },
                          { month: 'Jul', value: 40 },
                          { month: 'Aug', value: 45 },
                          { month: 'Sep', value: 67 },
                          { month: 'Oct', value: 90 },
                          { month: 'Nov', value: 120 },
                          { month: 'Dec', value: 130 },
                        ]}
                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="value" name={t('forecasting.demandIndex')} fill="#3b82f6" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                  <div className="mt-4 text-sm text-gray-500">
                    <p>{t('forecasting.seasonalTrendsDescription')}</p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Supply Chain Visualization Tab */}
          {activeTab === 'visualization' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-medium">{t('visualization.supplyChainMap')}</h3>
                <div className="flex space-x-2">
                  <button
                    className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <ArrowPathIcon className="h-4 w-4 mr-2" />
                    {t('visualization.refresh')}
                  </button>
                  <button
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <PlusIcon className="h-4 w-4 mr-2" />
                    {t('visualization.addLocation')}
                  </button>
                </div>
              </div>
              
              {/* Supply Chain Map */}
              <div className="bg-white border rounded-lg overflow-hidden">
                <div className="h-[500px] relative">
                  <div className="absolute inset-0 z-0">
                    {typeof window !== 'undefined' && (
                      <MapContainer
                        center={mapCenter}
                        zoom={mapZoom}
                        style={{ height: '100%', width: '100%' }}
                      >
                        <TileLayer
                          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        />
                        
                        {/* Render nodes */}
                        {supplyChainNodes.map(node => (
                          <Marker
                            key={node.id}
                            position={[node.location.latitude, node.location.longitude]}
                          >
                            <Popup>
                              <div>
                                <h3 className="font-medium">{node.name}</h3>
                                <p className="text-sm text-gray-500">{t(`visualization.${node.type}`)}</p>
                                <p className={`text-xs mt-1 ${
                                  node.status === 'critical' ? 'text-red-600' :
                                  node.status === 'warning' ? 'text-yellow-600' :
                                  'text-green-600'
                                }`}>
                                  {t(`visualization.${node.status}`)}
                                </p>
                              </div>
                            </Popup>
                          </Marker>
                        ))}
                        
                        {/* Render links */}
                        {supplyChainLinks.map(link => {
                          const sourceNode = supplyChainNodes.find(node => node.id === link.source);
                          const targetNode = supplyChainNodes.find(node => node.id === link.target);
                          
                          if (!sourceNode || !targetNode) return null;
                          
                          const positions = [
                            [sourceNode.location.latitude, sourceNode.location.longitude],
                            [targetNode.location.latitude, targetNode.location.longitude]
                          ] as [number, number][];
                          
                          return (
                            <Polyline
                              key={link.id}
                              positions={positions}
                              color={
                                link.status === 'disrupted' ? '#ef4444' :
                                link.status === 'delayed' ? '#f59e0b' :
                                '#3b82f6'
                              }
                              weight={link.type === 'primary' ? 3 : 2}
                              dashArray={link.type === 'backup' ? '5, 5' : undefined}
                            />
                          );
                        })}
                      </MapContainer>
                    )}
                  </div>
                </div>
                
                <div className="p-4 border-t">
                  <div className="flex flex-wrap gap-4">
                    <div className="flex items-center">
                      <div className="h-3 w-6 bg-blue-500 mr-2"></div>
                      <span className="text-sm text-gray-600">{t('visualization.activePath')}</span>
                    </div>
                    <div className="flex items-center">
                      <div className="h-3 w-6 bg-yellow-500 mr-2"></div>
                      <span className="text-sm text-gray-600">{t('visualization.delayedPath')}</span>
                    </div>
                    <div className="flex items-center">
                      <div className="h-3 w-6 bg-red-500 mr-2"></div>
                      <span className="text-sm text-gray-600">{t('visualization.disruptedPath')}</span>
                    </div>
                    <div className="flex items-center">
                      <div className="h-3 w-6 border-2 border-dashed border-blue-500 mr-2"></div>
                      <span className="text-sm text-gray-600">{t('visualization.backupPath')}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Supply Chain Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-white border rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-700">{t('visualization.networkMetrics')}</h4>
                  <div className="mt-4 space-y-3">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-500">{t('visualization.totalNodes')}</span>
                      <span className="text-sm font-medium">{supplyChainNodes.length}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-500">{t('visualization.totalLinks')}</span>
                      <span className="text-sm font-medium">{supplyChainLinks.length}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-500">{t('visualization.averageLeadTime')}</span>
                      <span className="text-sm font-medium">
                        {supplyChainLinks.length > 0
                          ? (supplyChainLinks.reduce((sum, link) => sum + link.leadTime, 0) / supplyChainLinks.length).toFixed(1)
                          : 'N/A'} {t('forecasting.days')}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-500">{t('visualization.networkReliability')}</span>
                      <span className="text-sm font-medium">
                        {supplyChainLinks.length > 0
                          ? `${(supplyChainLinks.filter(link => link.status === 'active').length / supplyChainLinks.length * 100).toFixed(1)}%`
                          : 'N/A'}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white border rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-700">{t('visualization.riskHotspots')}</h4>
                  <div className="mt-4 space-y-2">
                    {supplyChainNodes
                      .filter(node => node.status === 'warning' || node.status === 'critical')
                      .map(node => (
                        <div key={node.id} className="flex items-start">
                          <div className={`flex-shrink-0 h-3 w-3 rounded-full mt-1 ${
                            node.status === 'critical' ? 'bg-red-500' : 'bg-yellow-500'
                          }`}></div>
                          <div className="ml-2">
                            <p className="text-sm font-medium">{node.name}</p>
                            <p className="text-xs text-gray-500">{t(`visualization.${node.type}`)}</p>
                          </div>
                        </div>
                      ))}
                    
                    {supplyChainNodes.filter(node => node.status === 'warning' || node.status === 'critical').length === 0 && (
                      <div className="text-sm text-gray-500 text-center py-4">
                        {t('visualization.noRiskHotspots')}
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="bg-white border rounded-lg p-4">
                  <h4 className="text-sm font-medium text-gray-700">{t('visualization.recommendations')}</h4>
                  <div className="mt-4 space-y-3">
                    <div className="flex items-start">
                      <div className="flex-shrink-0">
                        <CheckCircleIcon className="h-5 w-5 text-green-500" />
                      </div>
                      <div className="ml-2">
                        <p className="text-sm">{t('visualization.recommendation1')}</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <div className="flex-shrink-0">
                        <CheckCircleIcon className="h-5 w-5 text-green-500" />
                      </div>
                      <div className="ml-2">
                        <p className="text-sm">{t('visualization.recommendation2')}</p>
                      </div>
                    </div>
                    <div className="flex items-start">
                      <div className="flex-shrink-0">
                        <ExclamationTriangleIcon className="h-5 w-5 text-yellow-500" />
                      </div>
                      <div className="ml-2">
                        <p className="text-sm">{t('visualization.recommendation3')}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Interactive Planning Tab */}
          {activeTab === 'planning' && (
            <DndProvider backend={HTML5Backend}>
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-medium">{t('planning.interactivePlanning')}</h3>
                  <button
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    <DocumentDownloadIcon className="h-4 w-4 mr-2" />
                    {t('planning.saveScenario')}
                  </button>
                </div>
                
                {/* Planning Board */}
                <div className="bg-white border rounded-lg overflow-hidden">
                  <div className="px-4 py-3 border-b">
                    <h3 className="text-lg font-medium">{t('planning.planningBoard')}</h3>
                    <p className="text-sm text-gray-500 mt-1">{t('planning.dragDropHint')}</p>
                  </div>
                  <div className="p-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {/* Inventory Column */}
                      <div className="border rounded-lg bg-gray-50 p-4">
                        <h4 className="font-medium text-gray-700 mb-4">{t('planning.inventory')}</h4>
                        <div className="space-y-2">
                          {inventoryItems.slice(0, 5).map(item => (
                            <div
                              key={item.id}
                              className="bg-white p-3 rounded border shadow-sm cursor-move"
                            >
                              <div className="flex justify-between">
                                <span className="font-medium">{item.name}</span>
                                <span className="text-xs text-gray-500">{item.sku}</span>
                              </div>
                              <div className="mt-1 text-sm text-gray-500">
                                {t('inventory.currentStock')}: {item.current_stock}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      {/* Suppliers Column */}
                      <div className="border rounded-lg bg-gray-50 p-4">
                        <h4 className="font-medium text-gray-700 mb-4">{t('planning.suppliers')}</h4>
                        <div className="space-y-2">
                          {suppliers.slice(0, 5).map(supplier => (
                            <div
                              key={supplier.id}
                              className="bg-white p-3 rounded border shadow-sm cursor-move"
                            >
                              <div className="flex justify-between">
                                <span className="font-medium">{supplier.name}</span>
                                <span className="text-xs text-gray-500">{supplier.country}</span>
                              </div>
                              <div className="mt-1 flex items-center">
                                <div className="w-24 h-1.5 bg-gray-200 rounded-full">
                                  <div 
                                    className={`h-1.5 rounded-full ${
                                      supplier.risk_score > 70 ? 'bg-red-500' : 
                                      supplier.risk_score > 30 ? 'bg-yellow-500' : 'bg-green-500'
                                    }`}
                                    style={{ width: `${supplier.risk_score}%` }}
                                  ></div>
                                </div>
                                <span className="ml-2 text-xs text-gray-500">
                                  {t('suppliers.riskScore')}: {supplier.risk_score}
                                </span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      {/* Planning Area */}
                      <div className="border rounded-lg bg-blue-50 p-4 min-h-[300px]">
                        <h4 className="font-medium text-gray-700 mb-4">{t('planning.planningArea')}</h4>
                        <div className="flex flex-col items-center justify-center h-full text-center text-gray-500 text-sm">
                          <p>{t('planning.dragItemsHere')}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Scenario Analysis */}
                <div className="bg-white border rounded-lg overflow-hidden">
                  <div className="px-4 py-3 border-b">
                    <h3 className="text-lg font-medium">{t('planning.scenarioAnalysis')}</h3>
                  </div>
                  <div className="p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-4">{t('planning.scenarioParameters')}</h4>
                        <div className="space-y-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700">
                              {t('planning.leadTimeVariation')}
                            </label>
                            <select className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                              <option>{t('planning.noChange')}</option>
                              <option>+10% {t('planning.increase')}</option>
                              <option>+20% {t('planning.increase')}</option>
                              <option>+30% {t('planning.increase')}</option>
                              <option>-10% {t('planning.decrease')}</option>
                              <option>-20% {t('planning.decrease')}</option>
                            </select>
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700">
                              {t('planning.demandVariation')}
                            </label>
                            <select className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                              <option>{t('planning.noChange')}</option>
                              <option>+10% {t('planning.increase')}</option>
                              <option>+20% {t('planning.increase')}</option>
                              <option>+30% {t('planning.increase')}</option>
                              <option>-10% {t('planning.decrease')}</option>
                              <option>-20% {t('planning.decrease')}</option>
                            </select>
                          </div>
                          
                          <div>
                            <label className="block text-sm font-medium text-gray-700">
                              {t('planning.supplierDisruption')}
                            </label>
                            <select className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                              <option>{t('planning.none')}</option>
                              <option>{t('planning.minorDisruption')}</option>
                              <option>{t('planning.majorDisruption')}</option>
                              <option>{t('planning.completeDisruption')}</option>
                            </select>
                          </div>
                          
                          <div className="pt-4">
                            <button
                              type="button"
                              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                            >
                              {t('planning.runScenario')}
                            </button>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-4">{t('planning.scenarioResults')}</h4>
                        <div className="space-y-4">
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span className="text-sm text-gray-500">{t('planning.serviceLevel')}</span>
                              <span className="text-sm font-medium">98.2%</span>
                            </div>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full">
                              <div className="h-2 bg-green-500 rounded-full" style={{ width: '98.2%' }}></div>
                            </div>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span className="text-sm text-gray-500">{t('planning.inventoryCost')}</span>
                              <span className="text-sm font-medium">{formatCurrency(12500)}</span>
                            </div>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full">
                              <div className="h-2 bg-blue-500 rounded-full" style={{ width: '65%' }}></div>
                            </div>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span className="text-sm text-gray-500">{t('planning.riskExposure')}</span>
                              <span className="text-sm font-medium">Medium</span>
                            </div>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full">
                              <div className="h-2 bg-yellow-500 rounded-full" style={{ width: '50%' }}></div>
                            </div>
                          </div>
                          
                          <div className="bg-gray-50 p-4 rounded-lg">
                            <div className="flex justify-between">
                              <span className="text-sm text-gray-500">{t('planning.resilience')}</span>
                              <span className="text-sm font-medium">High</span>
                            </div>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full">
                              <div className="h-2 bg-green-500 rounded-full" style={{ width: '85%' }}></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </DndProvider>
          )}
        </div>
      </div>
      
      {/* Add Inventory Modal */}
      {showAddInventoryModal && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      {t('inventory.addItem')}
                    </h3>
                    <div className="mt-4 space-y-4">
                      <div>
                        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                          {t('inventory.name')}
                        </label>
                        <input
                          type="text"
                          name="name"
                          id="name"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={inventoryFormData.name}
                          onChange={(e) => setInventoryFormData({ ...inventoryFormData, name: e.target.value })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="sku" className="block text-sm font-medium text-gray-700">
                          {t('inventory.sku')}
                        </label>
                        <input
                          type="text"
                          name="sku"
                          id="sku"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={inventoryFormData.sku}
                          onChange={(e) => setInventoryFormData({ ...inventoryFormData, sku: e.target.value })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                          {t('inventory.description')}
                        </label>
                        <textarea
                          name="description"
                          id="description"
                          rows={3}
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={inventoryFormData.description}
                          onChange={(e) => setInventoryFormData({ ...inventoryFormData, description: e.target.value })}
                        ></textarea>
                      </div>
                      
                      <div>
                        <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                          {t('inventory.category')}
                        </label>
                        <input
                          type="text"
                          name="category"
                          id="category"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={inventoryFormData.category}
                          onChange={(e) => setInventoryFormData({ ...inventoryFormData, category: e.target.value })}
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="current_stock" className="block text-sm font-medium text-gray-700">
                            {t('inventory.currentStock')}
                          </label>
                          <input
                            type="number"
                            name="current_stock"
                            id="current_stock"
                            min="0"
                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value={inventoryFormData.current_stock}
                            onChange={(e) => setInventoryFormData({ ...inventoryFormData, current_stock: parseInt(e.target.value) })}
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="reorder_point" className="block text-sm font-medium text-gray-700">
                            {t('inventory.reorderPoint')}
                          </label>
                          <input
                            type="number"
                            name="reorder_point"
                            id="reorder_point"
                            min="0"
                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value={inventoryFormData.reorder_point}
                            onChange={(e) => setInventoryFormData({ ...inventoryFormData, reorder_point: parseInt(e.target.value) })}
                          />
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="lead_time_days" className="block text-sm font-medium text-gray-700">
                            {t('inventory.leadTimeDays')}
                          </label>
                          <input
                            type="number"
                            name="lead_time_days"
                            id="lead_time_days"
                            min="0"
                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value={inventoryFormData.lead_time_days}
                            onChange={(e) => setInventoryFormData({ ...inventoryFormData, lead_time_days: parseInt(e.target.value) })}
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="unit_cost" className="block text-sm font-medium text-gray-700">
                            {t('inventory.unitCost')}
                          </label>
                          <div className="mt-1 relative rounded-md shadow-sm">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <span className="text-gray-500 sm:text-sm">$</span>
                            </div>
                            <input
                              type="number"
                              name="unit_cost"
                              id="unit_cost"
                              min="0"
                              step="0.01"
                              className="block w-full pl-7 pr-12 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                              value={inventoryFormData.unit_cost}
                              onChange={(e) => setInventoryFormData({ ...inventoryFormData, unit_cost: parseFloat(e.target.value) })}
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <label htmlFor="supplier_id" className="block text-sm font-medium text-gray-700">
                          {t('inventory.supplier')}
                        </label>
                        <select
                          id="supplier_id"
                          name="supplier_id"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={inventoryFormData.supplier_id}
                          onChange={(e) => setInventoryFormData({ ...inventoryFormData, supplier_id: e.target.value })}
                        >
                          <option value="">{t('inventory.selectSupplier')}</option>
                          {suppliers.map(supplier => (
                            <option key={supplier.id} value={supplier.id}>
                              {supplier.name} ({supplier.country})
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleAddInventoryItem}
                >
                  {t('actions.add')}
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowAddInventoryModal(false)}
                >
                  {t('actions.cancel')}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Add Risk Modal */}
      {showAddRiskModal && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      {t('risks.addRisk')}
                    </h3>
                    <div className="mt-4 space-y-4">
                      <div>
                        <label htmlFor="risk_name" className="block text-sm font-medium text-gray-700">
                          {t('risks.name')}
                        </label>
                        <input
                          type="text"
                          name="risk_name"
                          id="risk_name"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={riskFormData.name}
                          onChange={(e) => setRiskFormData({ ...riskFormData, name: e.target.value })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="risk_description" className="block text-sm font-medium text-gray-700">
                          {t('risks.description')}
                        </label>
                        <textarea
                          name="risk_description"
                          id="risk_description"
                          rows={3}
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={riskFormData.description}
                          onChange={(e) => setRiskFormData({ ...riskFormData, description: e.target.value })}
                        ></textarea>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="risk_category" className="block text-sm font-medium text-gray-700">
                            {t('risks.category')}
                          </label>
                          <select
                            id="risk_category"
                            name="risk_category"
                            className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                            value={riskFormData.risk_category}
                            onChange={(e) => setRiskFormData({ ...riskFormData, risk_category: e.target.value })}
                          >
                            <option value="supplier">{t('risks.categorySupplier')}</option>
                            <option value="geopolitical">{t('risks.categoryGeopolitical')}</option>
                            <option value="logistics">{t('risks.categoryLogistics')}</option>
                            <option value="compliance">{t('risks.categoryCompliance')}</option>
                            <option value="financial">{t('risks.categoryFinancial')}</option>
                          </select>
                        </div>
                        
                        <div>
                          <label htmlFor="risk_level" className="block text-sm font-medium text-gray-700">
                            {t('risks.level')}
                          </label>
                          <select
                            id="risk_level"
                            name="risk_level"
                            className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                            value={riskFormData.risk_level}
                            onChange={(e) => setRiskFormData({ ...riskFormData, risk_level: e.target.value })}
                          >
                            <option value="low">{t('risks.levelLow')}</option>
                            <option value="medium">{t('risks.levelMedium')}</option>
                            <option value="high">{t('risks.levelHigh')}</option>
                            <option value="critical">{t('risks.levelCritical')}</option>
                          </select>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label htmlFor="impact_score" className="block text-sm font-medium text-gray-700">
                            {t('risks.impact')} (1-10)
                          </label>
                          <input
                            type="number"
                            name="impact_score"
                            id="impact_score"
                            min="1"
                            max="10"
                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value={riskFormData.impact_score}
                            onChange={(e) => setRiskFormData({ ...riskFormData, impact_score: parseInt(e.target.value) })}
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="probability_score" className="block text-sm font-medium text-gray-700">
                            {t('risks.probability')} (1-10)
                          </label>
                          <input
                            type="number"
                            name="probability_score"
                            id="probability_score"
                            min="1"
                            max="10"
                            className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                            value={riskFormData.probability_score}
                            onChange={(e) => setRiskFormData({ ...riskFormData, probability_score: parseInt(e.target.value) })}
                          />
                        </div>
                      </div>
                      
                      <div>
                        <label htmlFor="affected_items" className="block text-sm font-medium text-gray-700">
                          {t('risks.affectedItems')}
                        </label>
                        <select
                          id="affected_items"
                          name="affected_items"
                          multiple
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={riskFormData.affected_items}
                          onChange={(e) => {
                            const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                            setRiskFormData({ ...riskFormData, affected_items: selectedOptions });
                          }}
                        >
                          {inventoryItems.map(item => (
                            <option key={item.id} value={item.id}>
                              {item.name} ({item.sku})
                            </option>
                          ))}
                        </select>
                        <p className="mt-1 text-xs text-gray-500">{t('risks.multipleSelectHint')}</p>
                      </div>
                      
                      <div>
                        <label htmlFor="affected_suppliers" className="block text-sm font-medium text-gray-700">
                          {t('risks.affectedSuppliers')}
                        </label>
                        <select
                          id="affected_suppliers"
                          name="affected_suppliers"
                          multiple
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={riskFormData.affected_suppliers}
                          onChange={(e) => {
                            const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);
                            setRiskFormData({ ...riskFormData, affected_suppliers: selectedOptions });
                          }}
                        >
                          {suppliers.map(supplier => (
                            <option key={supplier.id} value={supplier.id}>
                              {supplier.name} ({supplier.country})
                            </option>
                          ))}
                        </select>
                        <p className="mt-1 text-xs text-gray-500">{t('risks.multipleSelectHint')}</p>
                      </div>
                      
                      <div>
                        <label htmlFor="mitigation_plan" className="block text-sm font-medium text-gray-700">
                          {t('risks.mitigationPlan')}
                        </label>
                        <textarea
                          name="mitigation_plan"
                          id="mitigation_plan"
                          rows={3}
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={riskFormData.mitigation_plan}
                          onChange={(e) => setRiskFormData({ ...riskFormData, mitigation_plan: e.target.value })}
                        ></textarea>
                      </div>
                      
                      <div>
                        <label htmlFor="risk_status" className="block text-sm font-medium text-gray-700">
                          {t('risks.status')}
                        </label>
                        <select
                          id="risk_status"
                          name="risk_status"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={riskFormData.status}
                          onChange={(e) => setRiskFormData({ ...riskFormData, status: e.target.value })}
                        >
                          <option value="active">{t('risks.statusActive')}</option>
                          <option value="mitigated">{t('risks.statusMitigated')}</option>
                          <option value="accepted">{t('risks.statusAccepted')}</option>
                          <option value="monitoring">{t('risks.statusMonitoring')}</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleAddRisk}
                >
                  {t('actions.add')}
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowAddRiskModal(false)}
                >
                  {t('actions.cancel')}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Add Forecast Modal */}
      {showForecastModal && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      {t('forecasting.addForecast')}
                    </h3>
                    <div className="mt-4 space-y-4">
                      <div>
                        <label htmlFor="forecast_item" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.item')}
                        </label>
                        <select
                          id="forecast_item"
                          name="forecast_item"
                          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
                          value={forecastFormData.item_id}
                          onChange={(e) => setForecastFormData({ ...forecastFormData, item_id: e.target.value })}
                        >
                          <option value="">{t('forecasting.selectItem')}</option>
                          {inventoryItems.map(item => (
                            <option key={item.id} value={item.id}>
                              {item.name} ({item.sku})
                            </option>
                          ))}
                        </select>
                      </div>
                      
                      <div>
                        <label htmlFor="forecast_date" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.date')}
                        </label>
                        <input
                          type="date"
                          name="forecast_date"
                          id="forecast_date"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={forecastFormData.forecast_date}
                          onChange={(e) => setForecastFormData({ ...forecastFormData, forecast_date: e.target.value })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="forecast_quantity" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.quantity')}
                        </label>
                        <input
                          type="number"
                          name="forecast_quantity"
                          id="forecast_quantity"
                          min="0"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={forecastFormData.forecast_quantity}
                          onChange={(e) => setForecastFormData({ ...forecastFormData, forecast_quantity: parseInt(e.target.value) })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="confidence_level" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.confidenceLevel')} (%)
                        </label>
                        <input
                          type="number"
                          name="confidence_level"
                          id="confidence_level"
                          min="0"
                          max="100"
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={forecastFormData.confidence_level}
                          onChange={(e) => setForecastFormData({ ...forecastFormData, confidence_level: parseInt(e.target.value) })}
                        />
                      </div>
                      
                      <div>
                        <label htmlFor="forecast_notes" className="block text-sm font-medium text-gray-700">
                          {t('forecasting.notes')}
                        </label>
                        <textarea
                          name="forecast_notes"
                          id="forecast_notes"
                          rows={3}
                          className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                          value={forecastFormData.notes}
                          onChange={(e) => setForecastFormData({ ...forecastFormData, notes: e.target.value })}
                        ></textarea>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleAddForecast}
                >
                  {t('actions.add')}
                </button>
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowForecastModal(false)}
                >
                  {t('actions.cancel')}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
